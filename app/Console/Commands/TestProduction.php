<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Artisan;

class TestProduction extends Command
{
    protected $signature = 'test:production {--filter=} {--v}';
    protected $description = '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞';

    public function handle()
    {
        $this->info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        $this->createTestTables();
        
        $filter = $this->option('filter');
        $verbose = $this->option('v');
        
        $command = 'php artisan test tests/Production/';
        
        if ($filter) {
            $command .= ' --filter=' . $filter;
        }
        
        if ($verbose) {
            $command .= ' --verbose';
        }
        
        $this->info('–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: ' . $command);
        
        $result = shell_exec($command . ' 2>&1');
        
        $this->info($result);
        
        $this->info('‚úÖ –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    }
    
    private function createTestTables(): void
    {
        $this->info('üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–æ–≤...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É bonuses –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!\Schema::hasTable('bonuses')) {
            \Schema::create('bonuses', function ($table) {
                $table->id();
                $table->foreignId('user_id')->constrained()->onDelete('cascade');
                $table->decimal('amount', 10, 2);
                $table->string('type')->default('regular');
                $table->string('receipt_id')->nullable();
                $table->string('id_sell')->nullable();
                $table->text('description')->nullable();
                $table->timestamps();
            });
            $this->info('‚úÖ –¢–∞–±–ª–∏—Ü–∞ bonuses —Å–æ–∑–¥–∞–Ω–∞');
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_device_tokens –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!\Schema::hasTable('user_device_tokens')) {
            \Schema::create('user_device_tokens', function ($table) {
                $table->id();
                $table->foreignId('user_id')->constrained()->onDelete('cascade');
                $table->string('device_token');
                $table->timestamps();
            });
            $this->info('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_device_tokens —Å–æ–∑–¥–∞–Ω–∞');
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É verification_codes –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!\Schema::hasTable('verification_codes')) {
            \Schema::create('verification_codes', function ($table) {
                $table->id();
                $table->string('phone');
                $table->string('code');
                $table->timestamp('expires_at');
                $table->timestamps();
            });
            $this->info('‚úÖ –¢–∞–±–ª–∏—Ü–∞ verification_codes —Å–æ–∑–¥–∞–Ω–∞');
        }
        
        $this->info('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
    }
} 
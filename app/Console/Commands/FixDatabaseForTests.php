<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

class FixDatabaseForTests extends Command
{
    protected $signature = 'fix:database-for-tests';
    protected $description = '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤';

    public function handle(): int
    {
        $this->info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ users
        if (!Schema::hasColumn('users', 'role')) {
            $this->info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'role' –≤ —Ç–∞–±–ª–∏—Ü—É users...");
            Schema::table('users', function ($table) {
                $table->string('role')->default('user');
            });
        }

        if (!Schema::hasColumn('users', 'bonus_amount')) {
            $this->info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'bonus_amount' –≤ —Ç–∞–±–ª–∏—Ü—É users...");
            Schema::table('users', function ($table) {
                $table->integer('bonus_amount')->default(0);
            });
        }

        if (!Schema::hasColumn('users', 'purchase_amount')) {
            $this->info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'purchase_amount' –≤ —Ç–∞–±–ª–∏—Ü—É users...");
            Schema::table('users', function ($table) {
                $table->integer('purchase_amount')->default(0);
            });
        }

        if (!Schema::hasColumn('users', 'birthday')) {
            $this->info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'birthday' –≤ —Ç–∞–±–ª–∏—Ü—É users...");
            Schema::table('users', function ($table) {
                $table->timestamp('birthday')->nullable();
            });
        }

        if (!Schema::hasColumn('users', 'children')) {
            $this->info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'children' –≤ —Ç–∞–±–ª–∏—Ü—É users...");
            Schema::table('users', function ($table) {
                $table->text('children')->nullable();
            });
        }

        if (!Schema::hasColumn('users', 'marital_status')) {
            $this->info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'marital_status' –≤ —Ç–∞–±–ª–∏—Ü—É users...");
            Schema::table('users', function ($table) {
                $table->text('marital_status')->nullable();
            });
        }

        if (!Schema::hasColumn('users', 'profile_completed_bonus_given')) {
            $this->info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'profile_completed_bonus_given' –≤ —Ç–∞–±–ª–∏—Ü—É users...");
            Schema::table('users', function ($table) {
                $table->boolean('profile_completed_bonus_given')->default(false);
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É verification_codes
        if (!Schema::hasTable('verification_codes')) {
            $this->info("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'verification_codes'...");
            Schema::create('verification_codes', function ($table) {
                $table->id();
                $table->string('phone');
                $table->string('code');
                $table->timestamp('expires_at');
                $table->timestamps();
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É bonuses
        if (!Schema::hasTable('bonuses')) {
            $this->info("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'bonuses'...");
            Schema::create('bonuses', function ($table) {
                $table->id();
                $table->foreignId('user_id')->constrained()->onDelete('cascade');
                $table->decimal('amount', 10, 2);
                $table->decimal('purchase_amount', 10, 2)->nullable();
                $table->string('type');
                $table->string('status');
                $table->timestamp('expires_at')->nullable();
                $table->string('id_sell')->nullable();
                $table->string('parent_id_sell')->nullable();
                $table->timestamps();
                $table->softDeletes();
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_device_tokens
        if (!Schema::hasTable('user_device_tokens')) {
            $this->info("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'user_device_tokens'...");
            Schema::create('user_device_tokens', function ($table) {
                $table->id();
                $table->foreignId('user_id')->constrained()->onDelete('cascade');
                $table->string('device_token');
                $table->timestamps();
            });
        }

        $this->info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!");
        return 0;
    }
} 